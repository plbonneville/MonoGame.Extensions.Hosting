name: Build, Test, and Publish

on: [push, pull_request]

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            src:
              - 'src/**'

  build:
    env:
      BUILD_CONFIG: "Release"
      SOLUTION: "MonoGame.Extensions.Hosting.sln"
      PROJECT: "./src/MonoGame.Extensions.Hosting/MonoGame.Extensions.Hosting.csproj"

    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Remove the WindowsDX sample if not on Windows
        if: runner.os != 'Windows'
        run: dotnet sln remove ./samples/platforms/Examples.WindowsDX/

      - name: Restore dependencies
        run: dotnet restore $SOLUTION

      - name: Build
        run: dotnet build $SOLUTION --nologo --no-restore --configuration $BUILD_CONFIG

      - name: Test
        run: dotnet test $SOLUTION --nologo --no-restore --no-build --verbosity normal --configuration $BUILD_CONFIG

      - name: Pack
        if: matrix.os == 'ubuntu-latest'
        run: dotnet pack $PROJECT --nologo --no-restore --no-build --configuration $BUILD_CONFIG

  publish:
    env:
      PROJECT: "./src/MonoGame.Extensions.Hosting/MonoGame.Extensions.Hosting.csproj"
    name: publish
    needs: [build]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.changes.outputs.src == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore dependencies
        run: dotnet restore $PROJECT

      - name: Publish NuGet package
        uses: brandedoutcast/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: $PROJECT
          # API key to authenticate with NuGet server
          NUGET_KEY: ${{secrets.NUGET_API_KEY}}
